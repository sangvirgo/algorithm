package com.sang.theory2;

public class Main {

	public static void main(String[] args) {
		/*
		DiceRoller diceRoller= new DiceRoller();
		diceRoller.roll();
		
		//overloading constructors
		Pizza pizza1 =new Pizza("hihhihi", "shfja");
		System.out.println(pizza1.getBread()+ " " + pizza1.getSauce()+ " " + pizza1.getCheese());
		
		Pizza pizza2= new Pizza("fhsjdh", "sfh", "hasf");
		System.out.println(pizza2.getBread()+ " " + pizza2.getSauce()+ " " + pizza2.getCheese());
		
//		array of objects
		
		Car car = new Car("BMW");
		Garage garage= new Garage();
		
		garage.Park(car);
		garage.Park(new Car("Mercedes"));
		
		
		//static keyword
//		Trong ngôn ngữ lập trình Java, private static final int MAX_SPEED = 110; có ý nghĩa như sau:
//		private: Đây là từ khóa chỉ rằng biến MAX_SPEED chỉ có thể truy cập trong cùng một class. Nó không thể được truy cập từ bên ngoài class đó.
//		static: Từ khóa này biểu thị rằng biến MAX_SPEED thuộc về lớp (class) chứ không phải của các đối tượng (objects) được tạo từ lớp đó. Nó có nghĩa là chỉ có một bản sao của biến MAX_SPEED tồn tại cho mỗi lớp, không phụ thuộc vào số lượng đối tượng của lớp đó.
//		final: Từ khóa này chỉ rằng giá trị của biến MAX_SPEED không thể thay đổi sau khi đã được gán một giá trị. Một khi đã gán giá trị MAX_SPEED = 110;, thì không thể gán lại giá trị mới cho biến này.
//		int: Đây là kiểu dữ liệu của biến MAX_SPEED, có nghĩa là biến này là một số nguyên.
//		MAX_SPEED = 110;: Đây là giá trị được gán cho biến MAX_SPEED, có nghĩa là MAX_SPEED có giá trị là 110.
	
		//khi tạo method trong class, khi gọi lại chỉ cần: NameClass.Method();
		
		
		 */
		
//		4 thuộc tính quan trọng trong oop
		
		
//		1. Tính Đóng Gói (Encapsulation)
//		Định nghĩa: Tính đóng gói là quá trình ẩn giấu các dữ liệu và chi tiết thực hiện của một đối tượng, chỉ để lộ những gì cần thiết. Điều này giúp bảo vệ dữ liệu khỏi sự truy cập và thay đổi trực tiếp từ bên ngoài.
//
//		Cách thực hiện trong Java:
//
//		Sử dụng các từ khóa private, protected, và public để kiểm soát quyền truy cập vào các thành phần của lớp.
//		Sử dụng các phương thức getter và setter để truy cập và thay đổi giá trị của các thuộc tính.
//		
		
		
	}

}
